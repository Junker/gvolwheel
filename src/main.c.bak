/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * main.c
 * Copyright (C) Dmitry Kosenkov aka Junker 2008 <junker@front.ru>
 * 
 * main.c is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * main.c is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

#include <config.h>

#include <gtk/gtk.h>
#include <glib/gstdio.h>
 



/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif



#include "callbacks.h"
#include "eggtrayicon.h"

GtkStatusIcon *tray_icon;
EggTrayIcon *egg_tray_icon; 
 
void on_mprefs_click (GtkMenuItem *menuitem) {
}

void on_mabout_click (GtkMenuItem *menuitem) {
	GtkAboutDialog *dlg = gtk_about_dialog_new ();
	gtk_about_dialog_set_program_name(dlg,"GVolWheel");
	gtk_about_dialog_set_version (dlg,"0.1");
	gtk_about_dialog_set_copyright (dlg,"Copyright (c) Dmitry Kosenkov 2008");
	gtk_about_dialog_set_comments (dlg,"http://");

	gtk_dialog_run (GTK_DIALOG (dlg));
	gtk_widget_destroy (dlg);
	

}
 
void tray_icon_on_scroll (GtkWidget *widget,GdkEventScroll *event,gpointer user_data) {
        g_printf("Scroll on tray icon\n");
}

void tray_icon_on_click(GtkStatusIcon *status_icon, 
                        gpointer user_data)
{
        g_printf("Clicked on tray icon\n");
}

void tray_icon_on_menu(GtkStatusIcon *status_icon, guint button, 
                       guint activate_time, gpointer user_data)
{
    GtkMenu *menu = GTK_MENU(gtk_menu_new());
	GtkImageMenuItem *mprefs =  gtk_image_menu_item_new_from_stock("gtk-preferences",NULL);
	GtkImageMenuItem *mabout =  gtk_image_menu_item_new_from_stock("gtk-about",NULL);
	GtkImageMenuItem *mquit =  gtk_image_menu_item_new_from_stock("gtk-quit",NULL);
	

	g_signal_connect(G_OBJECT(mprefs),"activate",G_CALLBACK(on_mprefs_click),NULL);
	g_signal_connect(G_OBJECT(mabout),"activate",G_CALLBACK(on_mabout_click),NULL);
	g_signal_connect(G_OBJECT(mquit),"activate",G_CALLBACK(gtk_main_quit),NULL);

	gtk_menu_shell_append(GTK_MENU_SHELL(menu),mprefs);
	gtk_menu_shell_append(GTK_MENU_SHELL(menu),mabout);
	gtk_menu_shell_append(GTK_MENU_SHELL(menu),gtk_separator_menu_item_new ());
	gtk_menu_shell_append(GTK_MENU_SHELL(menu),mquit);
	
	gtk_widget_show_all (menu);
	gtk_menu_popup (menu,NULL,NULL,NULL,NULL,button,activate_time);
	g_printf("Popup menu\n");
}

static GtkStatusIcon *create_tray_icon() { 

        GtkEventBox *event = gtk_event_box_new ();
		tray_icon = gtk_status_icon_new();

		g_signal_connect(G_OBJECT(tray_icon), "activate",G_CALLBACK(tray_icon_on_click), NULL);
        g_signal_connect(G_OBJECT(tray_icon),"popup-menu",G_CALLBACK(tray_icon_on_menu), NULL);
        g_signal_connect(G_OBJECT(event),"scroll-event",G_CALLBACK(event_on_scroll), NULL);
        
		gtk_status_icon_set_from_icon_name(tray_icon,GTK_STOCK_MEDIA_STOP);
        gtk_status_icon_set_tooltip(tray_icon,"Example Tray Icon");
        gtk_status_icon_set_visible(tray_icon, TRUE);
		
		gtk_widget_set_parent (event,tray_icon);
        return tray_icon;
}

static  EggTrayIcon *create_egg_tray_icon() {
	GtkWidget *box = gtk_event_box_new();
	GtkWidget *image = gtk_image_new_from_icon_name (GTK_STOCK_MEDIA_STOP,NULL);
	
	egg_tray_icon = egg_tray_icon_new("GVolwheel");
	gtk_container_add(GTK_CONTAINER(box), image);
	gtk_container_add(GTK_CONTAINER(egg_tray_icon), box);
	g_signal_connect(G_OBJECT(egg_tray_icon),"scroll-event",G_CALLBACK(event_on_scroll), NULL);
	gtk_widget_show_all(GTK_WIDGET(egg_tray_icon));
	return egg_tray_icon;
}

int
main (int argc, char *argv[])
{


#ifdef ENABLE_NLS
	bindtextdomain (GETTEXT_PACKAGE, PACKAGE_LOCALE_DIR);
	bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
	textdomain (GETTEXT_PACKAGE);
#endif

	
	gtk_set_locale ();
	gtk_init (&argc, &argv);
	
	egg_tray_icon = create_egg_tray_icon();
	
	gtk_main ();
	return 0;
}
